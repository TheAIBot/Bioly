@inject IJSRuntime JsRuntime;

<button class="tab" id="quickSaveButton" onclick="quickSave();">Quick Save</button>
<button class="tab" id="saveAsButton" @onclick="SaveAs">Save as...</button>
<button class="tab" id="quickLoadButton" onclick="quickLoad();">Quick Load</button>
<button class="tab" id="loadButton" @onclick="LoadFile">Load File</button>

@code {
    Saver Save;

    protected override void OnAfterRender()
    {
        if (Save == null)
        {
            Save = new Saver(JsRuntime);

            string[] files = new string[]
            {
                "programs/Basic protocol for E.coli Quick.txt",
                "programs/Basic protocol for E.coli Quick10.txt",
                "programs/Basic protocol for E.coli Step 1.txt",
                "programs/Basic protocol for E.coli Step 2.txt",
                "programs/Basic protocol for E.coli Step 3.txt",
                "programs/Basic protocol for E.coli Step 3_5.txt",
                "programs/Basic protocol for E.coli.txt",
                "programs/diluter.txt",
                "programs/UsingDiluter.txt",
                "programs/UsingDiluter1.txt",
                "programs/UsingDiluter2.txt",
            };
        }
    }

    public async void QuickSave()
    {
        string workspaceXml = await JsRuntime.InvokeAsync<string>("getWorkspaceAsXml");
        Save.QuickSave(workspaceXml);
    }

    public async void SaveAs()
    {
        string workspaceXml = await JsRuntime.InvokeAsync<string>("getWorkspaceAsXml");
        Save.SaveAs(workspaceXml);
    }

    public void QuickLoad()
    {
        Save.QuickLoad();
    }

    public void LoadFile()
    {
        Save.LoadFile();
    }
}
